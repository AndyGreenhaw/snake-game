{"version":3,"sources":["App.js","components/Snake.js","components/Food.js","images/cherry-one.png","index.js"],"names":["snakeInterval","props","snakeDots","map","dot","i","style","left","top","className","getRandomCoordinates","Math","floor","random","startingPosition","food","speed","direction","App","state","startButton","startGame","event","console","log","setInterval","moveSnake","document","onkeydown","onKeyDown","pauseSnake","dots","length","head","push","shift","setState","e","window","keyCode","clearInterval","this","intervalId","checkIfOutOfBounds","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","growSnake","increaseSpeed","newSnake","unshift","alert","id","Snake","Food","onClick","pauseGame","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a7f9bb23.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Snake from './components/Snake';\nimport Food from './components/Food'\n// import ebbieHead from \"./images/ebbieHead.png\"\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst startingPosition = {\n    food: getRandomCoordinates(),\n    speed: 200,\n    direction: 'RIGHT',\n    snakeDots: [\n      [0,0],\n      [2,0],\n    ],\n}\n\n// 1) CREATE TWO BUTTONS\n  // Start Button: starts the game\n  // Pause Button: pauses game\n// 2) START BUTTON\n  //  3) Make the start button initialize direction and speed\n  //  4) Make start button activate eating self penalty\n// 5) PAUSE BUTTON\n  //  5) Stops snake direction and speed\n  //  6) Stops all penalties\n  //  7) Greys out screen\n\nlet snakeInterval;\n\nclass App extends Component {\n\n  state = {\n    food: getRandomCoordinates(),\n    speed: 200,\n    direction: 'RIGHT',\n    snakeDots: [\n      [0,0],\n      [2,0],\n    ],\n    startButton: \"Start\"\n  }\n\n  componentDidMount() {\n    clearInterval(this.intervalId)\n    setInterval(this.pauseSnake, 200)\n    document.onkeydown = this.onKeyDown\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBounds()\n    this.checkIfCollapsed()\n    this.checkIfEat()\n  }\n\n  startGame = event => {\n    console.log(\"read\")\n    snakeInterval = setInterval(this.moveSnake, 200)\n    document.onkeydown = this.onKeyDown\n  }\n\n  // startGame = event => {\n\n  //   if (this.state.startButton = \"Start\") {\n  //     snakeInterval = setInterval(this.moveSnake, 200)\n  //     document.onkeydown = this.onKeyDown\n  //     this.setState({startButton: \"Pause\"})\n  //     console.log(this.state.start)\n  //   } else if (this.state.startButton = \"Pause\"){\n  //     console.log(\"read\")\n  //     clearInterval(snakeInterval)\n  //     this.setState({startButton: \"Start\"})\n  //   }\n  // }\n\n  pauseGame() {\n    clearInterval(snakeInterval)\n    // this.state.startButton = \"Start\"\n  }\n\n  pauseSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] -2];\n        break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'})\n        // this.ebbieHeadDirection()\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'})\n        // this.ebbieHeadDirection()\n        break;\n      case 37: \n        this.setState({direction: 'LEFT'});\n        // this.ebbieHeadDirection()\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'})\n        // this.ebbieHeadDirection()\n        break;\n      }\n}\n    // ebbieHeadDirection = () => {\n    //   const ebbieHead = this.state.snakeDots[this.state.snakeDots.length -1]\n    //   console.log(ebbieHead)\n\n    // }\n\n  checkIfOutOfBounds() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots]\n    let head = snake[snake.length - 1]\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] ==dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length -1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]){\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.growSnake()\n      this.increaseSpeed()\n    }\n  }\n\n  growSnake() {\n    let newSnake = [...this.state.snakeDots]\n    newSnake.unshift([])\n    this.setState({\n      snakeDots:newSnake\n    })\n\n    let snakeArray = this.state.snakeDots\n\n    // console.log(snakeArray[snakeArray.length - 1])\n\n  }\n\n  increaseSpeed() {\n    console.log(this.state.speed)\n    let speed = this.state.speed\n\n    if (this.state.speed > 10) {\n      speed -= 10;\n      this.setState({\n        speed\n      })\n    }\n\n    clearInterval(this.intervalId)\n    this.intervalId = setInterval(this.moveSnake, this.state.speed)\n    console.log(this.intervalId)\n\n  }\n\n  onGameOver() {\n    alert(`Game Over. Your score is ${(this.state.snakeDots.length - 2)}`)\n\n    // document.getElementById(\"gameOverSlide\").style.display = 'flex'\n\n    this.setState(startingPosition)\n    clearInterval(snakeInterval) \n  }\n\n  render(){\n    return (\n      <>\n        <div className=\"gameOverSlide\">\n        </div>\n        <div className=\"headSection\">\n          <div className=\"mainSnakeHeadline\">Snake</div>\n        \n          <div className=\"mainSubhead\">Eat the Apples</div>\n        </div>\n        <main id=\"gameArea\">\n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food}/>\n        \n        </main>\n        <div className=\"scoreSection\">\n          <div className=\"foodScoreSymbol\"/>\n          <div className=\"scoreCopy\">Score:</div>\n          <div className=\"scoreAmount\">{(this.state.snakeDots.length -2)}</div>\n        </div>\n        <div className=\"buttonSection\">\n            <button \n              className=\"bothStartPauseButtons\" \n              id=\"startButton\"\n              onClick={this.startGame}\n            >\n              {this.state.startButton}\n            </button>\n            <button \n              className=\"bothStartPauseButtons\" \n              id=\"pauseButton\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i) => {\r\n                const style ={\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`\r\n                }            \r\n\r\n                return (\r\n                    <div \r\n                        className=\"snake-dot\" \r\n                        key={i} \r\n                        style={style}\r\n                    ></div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport cherry from '../images/cherry-one.png'\r\n\r\nexport default (props) => {\r\n\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n    return(\r\n        <div className=\"snake-food\" \r\n            style={style}\r\n        >\r\n            {/* <img className=\"cherry\" src= {cherry} /> */}\r\n\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/cherry-one.5c2fc25e.png\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}